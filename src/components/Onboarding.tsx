"use client";

import { useState, useEffect } from "react";

interface OnboardingProps {
  onComplete: () => void;
}

const steps = [
  {
    title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NewsHub",
    description: "–í–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –±–∞–∑–µ –ò–ò",
    icon: "‚ú®",
    content: "–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ, –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
  },
  {
    title: "–î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
    description: "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ RSS-–ª–µ–Ω—Ç—ã —Å –ª—é–±—ã—Ö —Å–∞–π—Ç–æ–≤",
    icon: "üì∞",
    content: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å RSS-–ª–µ–Ω—Ç—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ 15 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.",
  },
  {
    title: "–§–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
    description: "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å",
    icon: "üîç",
    content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π. –ù–∞—à –ò–ò –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏.",
  },
  {
    title: "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
    description: "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é",
    icon: "‚≠ê",
    content: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–µ—Ä–¥—Ü–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ù–∞—à –ò–ò —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –≤—ã–±–æ—Ä–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.",
  },
  {
    title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–µ –ò–ò",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏",
    icon: "ü§ñ",
    content: "–ö–æ–≥–¥–∞ –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å—Ç–∞—Ç—å–∏, –Ω–∞—à –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è.",
  },
];

export function Onboarding({ onComplete }: OnboardingProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(true);

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      setIsVisible(false);
      setTimeout(onComplete, 300);
    }
  };

  const handleSkip = () => {
    setIsVisible(false);
    setTimeout(onComplete, 300);
  };

  if (!isVisible) return null;

  const step = steps[currentStep];
  const progress = ((currentStep + 1) / steps.length) * 100;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-md"
      style={{ animation: "fadeIn 0.3s ease-out" }}
    >
      <div
        className="relative w-full max-w-lg rounded-3xl p-8 shadow-2xl"
        style={{
          background: "var(--card-bg)",
          animation: "slideUp 0.4s ease-out",
        }}
      >
        {/* Progress Bar */}
        <div className="mb-8 h-1 w-full overflow-hidden rounded-full" style={{ background: "var(--surface)" }}>
          <div
            className="h-full rounded-full transition-all duration-500"
            style={{
              width: `${progress}%`,
              background: "var(--accent)",
            }}
          />
        </div>

        {/* Icon */}
        <div className="mb-6 flex justify-center">
          <div
            className="flex h-20 w-20 items-center justify-center rounded-2xl text-4xl transition-all duration-300 hover:scale-110"
            style={{
              background: "var(--surface)",
              border: "2px solid var(--border)",
              boxShadow: "0 4px 24px rgba(0, 0, 0, 0.1)",
            }}
          >
            {step.icon}
          </div>
        </div>

        {/* Content */}
        <div className="mb-8 text-center">
          <h2 className="mb-2 text-2xl font-bold" style={{ color: "var(--text-primary)" }}>
            {step.title}
          </h2>
          <p className="mb-4 text-sm font-medium" style={{ color: "var(--accent)" }}>
            {step.description}
          </p>
          <p className="text-sm leading-relaxed" style={{ color: "var(--text-secondary)" }}>
            {step.content}
          </p>
        </div>

        {/* Buttons */}
        <div className="flex items-center justify-between gap-4">
          <button
            onClick={handleSkip}
            className="rounded-xl px-6 py-3 text-sm font-semibold transition hover:opacity-60"
            style={{ color: "var(--text-secondary)" }}
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </button>

          <div className="flex gap-2">
            {steps.map((_, index) => (
              <div
                key={index}
                className="h-2 w-2 rounded-full transition-all"
                style={{
                  background: index === currentStep ? "var(--accent)" : "var(--surface)",
                  width: index === currentStep ? "24px" : "8px",
                }}
              />
            ))}
          </div>

          <button
            onClick={handleNext}
            className="rounded-xl px-6 py-3 text-sm font-semibold transition-all duration-300 hover:scale-105 hover:shadow-xl"
            style={{
              background: "var(--accent)",
              color: "white",
              boxShadow: "0 4px 16px rgba(0, 0, 0, 0.15)",
            }}
          >
            {currentStep === steps.length - 1 ? "–ù–∞—á–∞—Ç—å" : "–î–∞–ª–µ–µ"}
          </button>
        </div>
      </div>

      <style jsx>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }

        @keyframes slideUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
    </div>
  );
}

